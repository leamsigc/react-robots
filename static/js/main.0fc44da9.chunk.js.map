{"version":3,"sources":["robots.js","Components/Title.js","Components/Robot.js","Components/Search.js","Components/Scroll.js","Card.js","serviceWorker.js","index.js"],"names":["robots","id","name","userName","email","Title","react_default","a","createElement","className","Component","Robot","_this$props","this","props","src","concat","alt","Search","onChange","searchChange","type","placeholder","Scroll","children","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","e","setState","search","target","value","state","robot","_this2","filteredRobot","filter","toLowerCase","includes","Fragment","Title_Title","Search_Search","Components_Scroll","map","r","Robot_Robot","React","Boolean","window","location","hostname","match","ReactDOM","render","src_Card","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fc44da9.chunk.js","sourcesContent":["export const robots = [\n\t{ id: 1, name: 'leamsigc', userName: 'leamsigc', email: 'lemsigc@hotmail.com' },\n\t{\n\t\tid: 2,\n\t\tname: 'ledasdasamsigc',\n\t\tuserName: 'leamasdasdsigc',\n\t\temail: 'lemsigc@hotmaasdasdil.com'\n\t},\n\t{\n\t\tid: 3,\n\t\tname: 'leasdasdasamsigc',\n\t\tuserName: 'leamsiasdasdasdcgc',\n\t\temail: 'lemsigc@hotmail.comcdcdcdc'\n\t},\n\t{\n\t\tid: 4,\n\t\tname: 'leasdasdasdamsigc',\n\t\tuserName: 'leamsigcasdasdasd',\n\t\temail: 'lemsigc@hotmaiasdasdasl.com'\n\t},\n\t{\n\t\tid: 5,\n\t\tname: 'adadsadaleamsigc',\n\t\tuserName: 'leamasdasdasdsigc',\n\t\temail: 'lemsigc@hotmail.asdadasdcom'\n\t},\n\t{\n\t\tid: 6,\n\t\tname: 'laaaaaeamsigc',\n\t\tuserName: 'leaawwwwamsigc',\n\t\temail: 'lemsigc@hotsdasdasdmail.com'\n\t},\n\t{\n\t\tid: 7,\n\t\tname: 'asdasdleamsigc',\n\t\tuserName: 'leaffdsfdsfamsigc',\n\t\temail: 'lemsigc@hotmaidfdfdfdfl.com'\n\t},\n\t{\n\t\tid: 8,\n\t\tname: 'sdfsdfleamsigc',\n\t\tuserName: 'ledfdfdfamsigc',\n\t\temail: 'lemsigc@hotmdfdfdfail.com'\n\t},\n\t{\n\t\tid: 9,\n\t\tname: 'lsdfdfbfbeamsigc',\n\t\tuserName: 'leamsffddfdfigc',\n\t\temail: 'lemsigc@hotmailfdfdf.com'\n\t}\n];\n","import React, { Component } from 'react';\n\nexport default class Title extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='title'>\n\t\t\t\t<h1>Hello from the robot app</h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nexport default class Robot extends Component {\n\trender() {\n\t\tconst { id, name, userName, email } = this.props;\n\t\treturn (\n\t\t\t<div className=\"card\" id={id}>\n\t\t\t\t<img className=\"card__img\" src={`https://robohash.org/${name}?200x200`} alt=\"simple Robot\" />\n\t\t\t\t<div className=\"card_info\">\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{userName}</p>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport '../Search-box.css';\n\nexport default class Search extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"search-box\">\n\t\t\t\t<input onChange={this.props.searchChange} className=\"search-input\" type=\"text\" placeholder=\"search ...\" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\n\n\nconst Scroll = props => {\n\treturn <div className='card__container'>{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from 'react';\nimport { robots } from './robots';\nimport './card.css';\nimport Title from './Components/Title';\nimport Robot from './Components/Robot';\nimport Search from './Components/Search';\nimport Scroll from './Components/Scroll';\n\nclass Card extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobot: robots,\n\t\t\tsearch: ''\n\t\t};\n\t}\n\n\tonSearchChange = e => {\n\t\tthis.setState({\n\t\t\tsearch: e.target.value\n\t\t});\n\t};\n\trender() {\n\t\tconst filteredRobot = this.state.robot.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.search.toLowerCase());\n\t\t});\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Title />\n\t\t\t\t<Search searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t{filteredRobot.map(r => {\n\t\t\t\t\t\treturn <Robot name={r.name} userName={r.userName} email={r.email} id={r.id} />;\n\t\t\t\t\t})}\n\t\t\t\t</Scroll>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Card;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Card />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}